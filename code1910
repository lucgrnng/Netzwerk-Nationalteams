---
---
title: "226305 Forschungsbericht"
subtitle: "Analyse der vergangenen drei Fußballweltmeister"
date: "Sommersemester 2020"
author: "Fiona Noever, Luca Gröning, Loris Hoffmann, Patrick Steinle | fn009@hdm-stuttgart.de, lg058@hdm-stuttgart.de, lh112@hdm-stuttgart.de, psXXX@hdm-stuttgart.de "
output: html_notebook
---

**Aufbau**
*1. Einleitung, Forschungsfrage und Motivation*
*2. Forschungsstand der empirischen und theoretischen Literatur*
*3. Datenerhebung: Zugang, Bereinigung und Codebuch*
*4. Analyse und Interpretation*
*5. Visualisierung des Netzwerks*
*6. Diskussion: Fazit, Limitationen und Ausblick*
*7. Literatur und Anhang*

*Genaueres zu den Unterpunkten in der Anleitung von Sandhu im Bericht*

# Einleitung
Wir untersuchen die wichtigsten Akteure in einem (fiktiven) studentischen Netzwerk aus dem Studiengang CR/PR, 3. Semester. Dabei interessiert uns besonders, ob es besonders zentrale Akteure innerhalb des Netzwerks gibt. Für das Netzwerk wurden 38 Studierende mit einem Fragebogen nach soziodemographischen Variablen (Alter, Geschlecht, Haarfarbe, Augenfarbe) sowie Verhaltensmuster (Vertiefungsrichtung, Konsum von Tabakwaren, Vorhandensein von Tattoos) befragt. Auf der Beziehungsebene interessiert uns, wer mit präferiert zusammenarbeit, wer besonders um Rat gefragt wird und wer eine Liebesbeziehung innerhalb des Netzwerks hat. 


# Vorarbeiten und vergleichbare Studien
## Forschungsstand
Das Forschungsdesign lehnt sich zum einen an die lange Tradition der Netzwerkanalyse in der Schulforschung an (XXXX). Es greift zudem die klassische Studie von Krackhardt (XXXX) auf, der ein Ratsuche und Unterstützungsnetzwerk in einem Unternehmen untersuchte. 

## Arbeitshypothesen
Wir gehen von folgenden Arbeitshypothesen aus:
a) Ratsuche: Der Knoten mit dem höchsten Indegree hat wahrscheinlich die Funktion des Semestersprechers.
b) Zusammenarbeit: orientiert sich primär an Homophilie, d.h. gleiche Vertiefungsrichtung.

Ansonsten hat die Analyse einen überwiegend explorativen Charakter.

# Datenerhebung: Zugang, Bereinigung und Codebuch

## Zugang
Studierende wurden innerhalb der Veranstaltung 226305a vom Dozierenden mit einem Online-Fragebogen befragt im Sommersemester 2017 befragt.

## Bereinigung des Datensatzes
Der Datensatz wurde anschließend anonymisiert. Die Relationen Ratsuche und Zusammenarbeit sind erhalten geblieben, die Beziehungen Liebe sind fiktiv. Der Datensatz ist unter [Github](https://github.com/hdm-crpr/226305/tree/master/data/crpr2) verfügbar.

## Codebuch
Das [Codebuch](https://github.com/lucgrnng/Netzwerk-Nationalteams/blob/master/Codebuch.md) beschreibt die Variablen, Relationen und Gewichte des Netzwerks und ist ebenfalls auf Github hinterlegt.

# Analyse und Interpretation

# Einlesen das Datensatzes & Erstellung igraph-Objekt

Das Gesamtnetzwerk umfasst 38 Knoten und 176 Beziehungen (siehe igraph-Objekt). Es ist gerichtet und gewichtet.

```{r Gesamnetzwerke erstellen, echo=FALSE, message=FALSE, warning=FALSE, paged.print=TRUE}

library(igraph)

# Einlesen der Edge- und Nodelist von Spanien 2010 
elS <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/NEU%20Spanien%202010%20Edgelist.csv", header=T, as.is=T, sep = ",")
nodesS <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/Neu%20Spanien%202010%20Nodelist.csv", header=T, as.is=T, sep = ",")

# Einlesen der Edge- und Nodelist von Deutschland 2014
elD <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/Edgelist%20Deutschland%202014%20neu.csv", header=T, as.is=T, sep = ",")
nodesD <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/Nodelist%20Deutschland%202014.csv", header=T, as.is=T, sep = ",")

# Einlesen der Edge- und Nodelist von Frankreich 2018
elF <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/Edgelist%20Frankreich%202018%20neu.csv", header=T, as.is=T, sep = ",")
nodesF <- read.csv("https://raw.githubusercontent.com/lucgrnng/Netzwerk-Nationalteams/master/Nodelist%20Frankreich%202018.csv", header=T, as.is=T, sep = ",")

# Matrix erstellen
edgematrixS <-as.matrix(elS)
edgematrixD <-as.matrix(elD)
edgematrixF <-as.matrix(elF)

# Zusammenführen von Edge- und Nodelist als igraph-Objekt Spanien10
Spanien10 <- graph_from_data_frame(d=edgematrixS, vertices=nodesS, directed=F)
Spanien10

# Zusammenführen von Edge- und Nodelist als igraph-Objekt Deutschland14
Deutschland14 <- graph_from_data_frame(d=edgematrixD, vertices=nodesD, directed=F)
Deutschland14

# Zusammenführen von Edge- und Nodelist als igraph-Objekt Frankreich18
Frankreich18 <- graph_from_data_frame(d=edgematrixF, vertices=nodesF, directed=F)
Frankreich18

```

TEXT ZU DEN NETZWERKEN (NOCH MACHEN)
Einleitender Text, was wurde gemacht (edge nodelist einlesen usw.)
dabei kam heraus... 
Spanien 10:
- 23 Knoten, 51 Beziehungen, DNW -- Bedeutung rausfinden
Deutschland 14: 
- 23 Knoten, 49 Beziehungen, DNW -- Bedeutung rausfinden
Frankreich 18: 
- 23 Knoten, 28 Beziehungen, DNW -- Bedeutung rausfinden

```{r Gesamnetzwerk von Deutschland erstellen, echo=FALSE, message=FALSE, warning=FALSE, paged.print=TRUE}

library(igraph)

## Sind die Netzwerke bereits vereinfacht?
# Zusammenführen von Edge- und Nodelist als igraph-Objekt Frankreich18
is.simple(Spanien10)
is.simple(Deutschland14)
is.simple(Frankreich18)

## Bestehen die Netzwerke aus Komponenten?
## wenn ja, wie vielen?
is.connected(Spanien10)
components(Spanien10)

is.connected(Deutschland14)
components(Deutschland14)

is.connected(Frankreich18)
components(Frankreich18)

## Welchen Umfang haben die Netzwerke? 
diameter(Spanien10)
diameter(Deutschland14)
diameter(Frankreich18)

```

TEXT ZU ERKENNTNISSEN (noch machen)
1) ja sind vereinfacht
2) es gibt nicht mehrere komponenten, also nur ein netzwerk jeweils (bei allen) --> nochmal nachlesen (bei sandhu auf folien nachschlagen)
3) 10 - 9 - 7 (Spanien & Deutschland größer als Frankreich da sie mehr Verbindungen aufweisen)

#Visualisierung der Netzwerke
##Visualisierung des Netzwerk Spanien 2010
```{r Einfache Visualisierung des erstellten Objekt der spanischen Nationalmannschaft 2010 , fig.height=10, fig.width=16, message=TRUE, warning=TRUE, paged.print=TRUE}

# Pro-Tipp: die Ausgabe jedes "chunks" lässt sich über das Rädchen direkt über dem Textfeld einstellen. Hier habe ich die Bildfläche auf 10 auf 16 Inches eingestellt, d.h. das Netzwerk wird automatisch auf eine Fläche von 10 auf 16 Inches geplottet. Für den Anfang empfehle ich immer bei Netzwerken bis 50 Knoten mit dem Kamada-Kawai Algorithmus zu arbeiten, weil hier die Knoten immer an die gleiche Position gesetzt werden und wir dadurch Abweichungen besser erkennen können.

plot(Spanien10,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Spanien10)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Spanien10),
     main ="Übersicht der spanischen Nationalmannschaft 2010")
```

*Vereinfachtes Gesamtnetzwerk Spanien2010*
Der erste Überblick zeigt, dass das Netzwerk der spanischen Nationalmannschaft 2010 geprägt ist von einzelnen, stark gewichteten Kanten. Teilweise sind Akteure schwach eingebunden, teiweise auch gar nicht. 

Deshalb ist es sinnvoll, ein vereinfachtes Gesamtnetzwerk der spanischen Nationalmannschaft 2010 zu erstellen. Vereinfacht bedeutet, dass die unterschiedlichen Beziehungsarten ignoriert werden und dafür die Gewichte des Value- und Relation-Netzwerks zusammengefasst werden (um das Ergebnis nicht zu verfälschen, wird das Beziehungsnetzwerk vorher gelöscht)

```{r Einfache Visualisierung des erstellten Objekt der deutschen Nationalmannschaft 2014, fig.height=10, fig.width=16, message=TRUE, warning=TRUE, paged.print=TRUE}

# Pro-Tipp: die Ausgabe jedes "chunks" lässt sich über das Rädchen direkt über dem Textfeld einstellen. Hier habe ich die Bildfläche auf 10 auf 16 Inches eingestellt, d.h. das Netzwerk wird automatisch auf eine Fläche von 10 auf 16 Inches geplottet. Für den Anfang empfehle ich immer bei Netzwerken bis 50 Knoten mit dem Kamada-Kawai Algorithmus zu arbeiten, weil hier die Knoten immer an die gleiche Position gesetzt werden und wir dadurch Abweichungen besser erkennen können.

plot(Deutschland14,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Deutschland14)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Deutschland14),
     main ="Übersicht der deutschen Nationalmannschaft 2014")
```

*Vereinfachtes Gesamtnetzwerk Deutschland2014*
Der erste Überblick zeigt, dass das Netzwerk der deutschen Nationalmannschaft 2014 nicht ganz so stark geprägt ist von einzelnen, stark gewichteten Kanten wie beim spanischen Team. Allerdings - auch hier sind Akteure schwach eingebunden, teiweise auch gar nicht.

Deshalb ist es sinnvoll, ein vereinfachtes Gesamtnetzwerk der deutschen Nationalmannschaft 2014 zu erstellen. Vereinfacht bedeutet, dass die unterschiedlichen Beziehungsarten ignoriert werden und dafür die Gewichte des Value- und Relation-Netzwerks zusammengefasst werden (um das Ergebnis nicht zu verfälschen, wird das Beziehungsnetzwerk vorher gelöscht)

```{r Einfache Visualisierung des erstellten Objekt der französischen Nationalmannschaft 2018, fig.height=10, fig.width=16, message=TRUE, warning=TRUE, paged.print=TRUE}

plot(Frankreich18,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Frankreich18)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Frankreich18),
     main ="Übersicht der französischen Nationalmannschaft 2018")
```

*Vereinfachtes Gesamtnetzwerk Frankreich2018*
Der erste Überblick zeigt, dass das Netzwerk der franzöischen Nationalmannschaft 2018 kaum stark geprägt ist von einzelnen, stark gewichteten Kanten wie bei den vorherigen Champions. 

Es macht Sinn, ein vereinfachtes Gesamtnetzwerk der französischen Nationalmannschaft 2018 zu erstellen. Vereinfacht bedeutet, dass die unterschiedlichen Beziehungsarten ignoriert werden und dafür die Gewichte des Value- und Relation-Netzwerks zusammengefasst werden (um das Ergebnis nicht zu verfälschen, wird das Beziehungsnetzwerk vorher gelöscht)
EVTL TEXT NOCH LÄNGER ???? 

#Genauerer Blick auf die Netzwerattribute

Einleitender Text 
(was bisher gemacht, was jetzt geplant ist)
sowohl edge als auch node-attribute genauer anschauen
```{r 2 Übersicht Netzwerkattribute}
#Wir können uns anschauen, welche Vertex- bzw. Edge-Attribute die einzelnen Netzwerke besitzen.
list.vertex.attributes(Spanien10)
list.vertex.attributes(Deutschland14)
list.vertex.attributes(Frankreich18)

list.edge.attributes(Spanien10)
list.edge.attributes(Deutschland14)
list.edge.attributes(Frankreich18)
#In Text: Man sieht, dass alle gleich aufgebaut sind.
```

TEXT DAZU (überall gleiche Attribute herangezogen um aussagekräftige Ergebnisse zu kriegen etc.)

NOCH MACHEN

#Auslesen der einzelnen Attribute: Spanien10
```{r 2 Auslesen von Attributen }
vertex.attributes(Spanien10)$age
vertex.attributes(Spanien10)$value
vertex.attributes(Spanien10)$number
vertex.attributes(Spanien10)$club

edge.attributes(Spanien10)$weight
edge.attributes(Spanien10)$relation

```

Text dazu
(Jede Zeile einzeln durchgehen und schon genauer beantworten)
1. Zeile alter
2. Zeile value 
... 
weight (Leute haben 1 Saison zsm gespielt bis leute haben 10 Saison miteinander gespielt. )
relation 

--> alles auch im Codebuch einlesen. 
Für Programmieren: Code für durchschnittsalter raussuchen. 
#Auslesen der einzelnen Attribute: Deutschland14
```{r 2 Auslesen von Attributen }
vertex.attributes(Deutschland14)$age
vertex.attributes(Deutschland14)$value
vertex.attributes(Deutschland14)$number
vertex.attributes(Deutschland14)$club

edge.attributes(Deutschland14)$weight
edge.attributes(Deutschland14)$relation
```
Text dazu
(Jede Zeile einzeln durchgehen und schon genauer beantworten)
1. Zeile alter
2. Zeile value 
... 
weight (Leute haben 1 Saison zsm gespielt bis leute haben 10 Saison miteinander gespielt. )
relation 

--> alles auch im Codebuch einlesen. 
Für Programmieren: Code für durchschnittsalter raussuchen. 

#Auslesen der einzelnen Attribute: Frankreich18
```{r 2 Auslesen von Attributen }
vertex.attributes(Frankreich18)$age
vertex.attributes(Frankreich18)$value
vertex.attributes(Frankreich18)$number
vertex.attributes(Frankreich18)$club

edge.attributes(Frankreich18)$weight
edge.attributes(Frankreich18)$relation
```

Text dazu
(Jede Zeile einzeln durchgehen und schon genauer beantworten)
1. Zeile alter
2. Zeile value 
... 
weight (Leute haben 1 Saison zsm gespielt bis leute haben 10 Saison miteinander gespielt. )
relation 

--> alles auch im Codebuch einlesen.  
Für Programmieren: Code für durchschnittsalter raussuchen. 


##Aufzählung der Attribute 

Einleitende Worte
Chunk mit relation & value machen; um aufzuzeigen dass es stärkere verbindungen gibt und weniger starke
aber für alle drei Ländern

#Netzwerk Spanien 2010 ohne Edge-Attribut relation und Edge-Attribut weight

```{r Vereinfachtes Gesamtnetzwerk Spanien10, fig.height=8, fig.width=16, message=FALSE, warning=FALSE}

# simplify Gesamtnetzwerk 
# Um die Ergebnisse der Gewichte nicht zu verfälschen, wird das Edge-Attribute relation gelöscht.
Spanien10V <- delete_edge_attr(Spanien10, "relation")
list.edge.attributes(Spanien10V)


# einfache Visualisierung des aggregierten Netzwerks
plot(Spanien10V,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Spanien10V)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Spanien10V),
     main ="Übersicht der spanischen Nationalmannschaft 2010 ohne Edge-Attribut relation")

# man kann mit denselben aber auch ein Netzwerk erstellen, welches sich nur auf das Edge-Attribut relation kozentriert.
Spanien10R <- delete_edge_attr(Spanien10, "weight")
list.edge.attributes(Spanien10R)

# einfache Visualisierung des aggregierten Netzwerks
plot(Spanien10R,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Spanien10R)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Spanien10R),
     main ="Übersicht der spanischen Nationalmannschaft 2010 ohne Edge-Attribut weight")

```

Beobachtungen schreiben

#Netzwerk Deutschland 2014 ohne Edge-Attribut relation und Edge-Attribut weight

```{r Vereinfachtes Gesamtnetzwerk Deutschland14, fig.height=8, fig.width=16, message=FALSE, warning=FALSE}
# simplify Gesamtnetzwerk 
# Um die Ergebnisse der Gewichte nicht zu verfälschen, wird das Edge-Attribute relation gelöscht.
Deutschland14V <- delete_edge_attr(Deutschland14, "relation")
list.edge.attributes(Deutschland14V)


# einfache Visualisierung des aggregierten Netzwerks
plot(Deutschland14V,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Deutschland14V)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Deutschland14V),
     main ="Übersicht der deutschen Nationalmannschaft 2014 ohne Edge-Attribut relation")

# man kann mit denselben aber auch ein Netzwerk erstellen, welches sich nur auf das Edge-Attribut relation kozentriert.
Deutschland14R <- delete_edge_attr(Deutschland14, "weight")
list.edge.attributes(Deutschland14R)

# einfache Visualisierung des aggregierten Netzwerks
plot(Deutschland14R,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Deutschland14R)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Deutschland14R),
     main ="Übersicht der deutschen Nationalmannschaft 2014 ohne Edge-Attribut weight")

```
Beobachtungen schreiben

#Netzwerk Frankreich 2018 ohne Edge-Attribut relation und Edge-Attribut weight

```{r Vereinfachtes Gesamtnetzwerk Frankreich18, fig.height=8, fig.width=16, message=FALSE, warning=FALSE}
# simplify Gesamtnetzwerk 
# Um die Ergebnisse der Gewichte nicht zu verfälschen, wird das Edge-Attribute relation gelöscht.
Frankreich18V <- delete_edge_attr(Frankreich18, "relation")
list.edge.attributes(Frankreich18V)


# einfache Visualisierung des aggregierten Netzwerks
plot(Frankreich18V,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Frankreich18V)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Frankreich18V),
     main ="Übersicht der französichen Nationalmannschaft 2018 ohne das Edge-Attribut relation")

# man kann mit denselben aber auch ein Netzwerk erstellen, welches sich nur auf das Edge-Attribut relation kozentriert.
Frankreich18R <- delete_edge_attr(Frankreich18, "weight")
list.edge.attributes(Frankreich18R)

# einfache Visualisierung des aggregierten Netzwerks
plot(Frankreich18R,
     layout=layout_in_circle,
     edge.arrow.size=.1,
     edge.color="grey",
     edge.curved=.2,
     asp=.5,
     edge.width=E(Frankreich18R)$weight,
     vertex.size=3,
     vertex.frame.color=NA,
     vertex.label.family="Helvetica",
     vertex.label.color="red3",
     vertex.label.dist=1,
     vertex.size=degree(Frankreich18V),
     main ="Übersicht der französichen Nationalmannschaft 2018 ohne das Edge-Attribut weight")

```

TEXT DAZU SCHREIBEN (Bebachtungen etc.)

## 4.2 Analyse der Teilnetzwerke 
###4.2.1 Einzelne Netzwerkdaten rausfiltern

Einleitender Text
(Was haben wir bisher gemacht, was wollen wir jetzt rausfinden)
--> Dichte und Pfaddistanzen
``` {r Teilnetzwerke erstellen und vereinfachen, message=FALSE, warning=FALSE, paged.print=FALSE}
## Dichte des Netzwerks
edge_density(Spanien10, loops=FALSE)
edge_density(Deutschland14, loops=FALSE)
edge_density(Frankreich18, loops=FALSE)

## Pfaddistanzen (Distance)
farthest_vertices(Spanien10)
farthest_vertices(Deutschland14)
farthest_vertices(Frankreich18)

```

Text schreiben 
Beobachtungen:
1) Dichte (auch mit genauen Zahlen am Besten; bei Frankreich viel weniger zb)
2) Weiteste Distanz (zwei Spieler, und die Distanz) 



##Akteursmaße

Einleitender Satz: Akteure mit wichtigen Beziehungen

```{r Netzwerke Degree}
#Degree
degree(Spanien10)
degree(Deutschland14)
degree(Frankreich18)

#Betweenness 
betweenness(Spanien10)
betweenness(Deutschland14)
betweenness(Frankreich18)

#Closeness
closeness(Spanien10)
closeness(Deutschland14)
closeness(Frankreich18)

#K-Core
coreness(Spanien10)
coreness(Deutschland14)
coreness(Frankreich18)

```

Beobachtungen, Ergebnisse: 
nochmal reinlesen, Skripte Sandhu; Ergebnisse daraus ziehen

Abschließender Text. Welche Spieler waren besonders wichtig etc?

--> K-Core sagt XYZ aus, daher interessant: Wie sieht es aus mit CLustern? Sind diese important Spieler vor allem da? Ist das gleich?

#Cluster und Cliquen 

```{r Netzwerke Degree}
# Anzahl der Cluster
clusters(Spanien10)
is_connected(Spanien10)

components(Spanien10)
cwSpanien10 <- cluster_walktrap(Spanien10)
modularity(cwSpanien10)
membership(cwSpanien10)
plot(cwSpanien10, Spanien10, edge.arrow.size=0.1, main="Cluster Spanien 2010")

clusters(Deutschland14)
is_connected(Deutschland14)

components(Deutschland14)
cwDeutschland14 <- cluster_walktrap(Deutschland14)
modularity(cwDeutschland14)
membership(cwDeutschland14)
plot(cwDeutschland14, Deutschland14, edge.arrow.size=0.1, main="Cluster Deutschland 2014")

clusters(Frankreich18)
is_connected(Frankreich18)

components(Frankreich18)
cwFrankreich18 <- cluster_walktrap(Frankreich18)
modularity(cwFrankreich18)
membership(cwFrankreich18)
plot(cwFrankreich18, Frankreich18, edge.arrow.size=0.1, main="Cluster Frankreich 2018")

#Largest CLiques
largest_cliques(Spanien10)
largest_cliques(Deutschland14)
largest_cliques(Frankreich18)

max_cliques(Spanien10)
max_cliques(Deutschland14)
max_cliques(Frankreich18)

```
ERKLÄRENDER TEXT USW
Beobachtungen und Unterschiede
Sowohl Cluster (Bilder) als auch Cliquen (R Console)

### 4.2.2 Teilnetzwerke nach Node-Attributen (CLUBS)

Hier teilnetzwerke erstellen für die großen clubs der länder --> Blöcke anzeigen lassen.
Erst später Texten 

*Teilnetzwerk Club* 

```{r Teilnetzwerk nach Node-Attribut Geschlecht, fig.height=6, fig.width=10, message=FALSE, warning=FALSE, paged.print=TRUE}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr2/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr2/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
s <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)

list.vertex.attributes(s)
vertex_attr(s)$sex

s_fem <- delete_vertices(s, V(s)[sex > "1"]) 
s_fem 
plot(s_fem, layout=layout_with_kk,
     main="Gesamtnetzwerk: weibliche Akteure",
     edge.color="pink",
     edge.arrow.size=.3,
     vertex.color="pink",
     vertex.frame.color=NA,
     sub="n=29, 110 Kanten")
```

TEXT ZU CLUB-Blöcke 

### Wichtigkeit der Spieler für den Erfolg

Einleitender Text
wie das aussieht mit important spieler etc.

```{r Teilnetzwerke erstellen und vereinfachen, message=FALSE, warning=FALSE, paged.print=FALSE}

Spanien10_imp <- delete_vertices(Spanien10, V(Spanien10)[value<4])
Spanien10_imp

```

```{r Deutschland14 Important}

Deutschland14_imp <- delete_vertices(Deutschland14, V(Deutschland14)[value<4])
Deutschland14_imp

```

```{r Frankreich18 Important}

Frankreich18_imp <- delete_vertices(Frankreich18, V(Frankreich18)[value<4])
Frankreich18_imp

```

Beobachtugen:
bsp. Deutschland: 14 Spieler, aber 33 Verbindungen -> eingespielt
Frankreich: 15 Spieler, 5 Verbindungen -> nicht eingespielt

### 5.1.1 Gesamtvisualisierung

```{r Visualisierung eines multiplexe Netzwerke erstellen, fig.height=8, fig.width=10, message=TRUE, paged.print=TRUE}
library(igraph)
el <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr2/edges.csv", header=T, as.is=T, sep = ",")
nodes <- read.csv("https://raw.githubusercontent.com/hdm-crpr/226305/master/data/crpr2/nodes.csv", header=T, as.is=T, sep = ",")
edgematrix <-as.matrix(el)
s <- graph_from_data_frame(d=edgematrix, vertices=nodes, directed=T)

# definiert die Farbe der Relation
E(s)[E(s)$relation == 1]$color <- "blue" 
E(s)[E(s)$relation == 2]$color <- "darkgreen"
E(s)[E(s)$relation == 3]$color <- "red"

# Visualisierungsparameter festlegen
par(mar=c(6,3,3,3)) 

# Plot mit den gesetzten Farben für das Attribut Beziehung realisieren
plot(s,
     asp=0,
     edge.arrow.size=.5,
     vertex.color="gray75",
     vertex.frame.color="NA",
     vertex.size=8,
     layout=layout_with_kk,
     edge.curved=curve_multiple(s),
     main="Multiplexes Netzwerk, d.h. verschiedene Formen der Beziehung",
     sub="n=38 Knoten; Kantenfarbe 
     blau=Zusammenarbeit, grün=Ratsuche, rot=Beziehung")

par(mar=c(0,0,0,0)) 

```

# 6. Diskussion: 
##Fazit 
## Limitationen / Grenzen
## Ausblick

# Anlage
## Literatur

## Codebuch

## Datenmaterial und Skript

## Team, Arbeitsaufwand und Lessons Learned
